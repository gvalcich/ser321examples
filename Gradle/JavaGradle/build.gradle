// set as java application
apply plugin: 'application'

// define main class
mainClassName = 'Multiply'

// task which will run Main with default parameters, 
// can be overwritten with: gradle runApp --args '3 4' 
task runApp(type: JavaExec) {
  group 'Multiply tasks'
  description 'Tasks which runs Multiply with default parameters'

  classpath = sourceSets.main.runtimeClasspath

  main = 'Multiply'

  // default arguments if none are given
  args '1'
  args '2'
}

// task which will run Main with default parameters, 
// but also accepts new parameters this time with given names
// Example: gradle runAppAgain -Pnum1=9 -Pnum2=10
// Example2 (this will make Gradle run more quietly in the console):
//   gradle runAppAgain -Pnum1=9 -Pnum2=10 -q --console=plain 
task runAppAgain(type: JavaExec) {
  group 'Multiply tasks'
  description 'Tasks which runs Multiply with default parameters or given values'

  classpath = sourceSets.main.runtimeClasspath

  main = 'Multiply'

  // Use default values if one or both parameters are missing
  if (project.hasProperty('num1') && project.hasProperty('num2')) {
    args(project.getProperty('num1'), project.getProperty('num2'))
  } else if (project.hasProperty('num1')) {
    args(project.getProperty('num1'), '1') // Default for num2
  } else {
    args '1', '1' // Default for both num1 and num2
  }
}

// task that runs the Fraction Main which does not use arguments: gradle runFraction
task runFraction(type: JavaExec) {
  group 'Fraction Tasks'
  description 'Tasks which runs Fraction with no arguments'

  classpath = sourceSets.main.runtimeClasspath

  main = 'Fraction'
}

// New task: runFrac
// Allows passing arguments to Fraction class
// Example: gradle runFrac -Pdenom=4 -Pnum=3 or gradle runFrac -Pnum=3 -Pdenom=4
task runFrac(type: JavaExec) {
  group 'Fraction Tasks'
  description 'Runs Fraction with parameters or defaults'

  classpath = sourceSets.main.runtimeClasspath

  main = 'Fraction'

  // Handle arguments with defaults if missing
  def num = project.hasProperty('num') ? project.getProperty('num') : '1'
  def denom = project.hasProperty('denom') ? project.getProperty('denom') : '1'

  args num, denom
}

// Add repositories section for pulling libraries from Maven Central
repositories {
  mavenCentral()
}

// Example dependency for JSON support
dependencies {
  implementation 'org.json:json:20171018'
}
